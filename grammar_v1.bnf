<id> ::= /[A-Za-z_][A-Za-z0-9_]*/

<str> ::= /"[^\n"]"/
<char> ::= /'([^\\]|\\\\|\\n|\\t|\\')'/
<num> ::=
	/[-+]?[1-9][0-9_]*/     ; base   10
	| /0x[A-Fa-f0-9_]+/     ; base 0x10
	| /0b[01_]+/            ; base 0b10

<typelist> ::= <type> {',' <type>}
<type> ::=
	'unit'
	| 'bool'
	| 'u16' | 'i16' | 'usize' | 'isize'
	| '^' <type>
	| '[' <type> ';' <num> ']'
	| 'fn' '(' [<typelist>] ')'
	| 'type' <id>

<type-decl> ::=
	'type' <id> [
		'=' <type> ';'
		| '{'
			<type> {'|' <type>}
			| <id> '=' <num> {'|' <id> ['=' <num>]}
			| <id> ':' <type> {',' <id> ':' <type>}
		'}'
	]

<rel-op> ::= '<' | '>' | '<=' | '>=' | '=' | '!='
<rel-expr> ::= <factor> {<rel-op> <factor>}

<value> ::=
	<factor>
	| '(' <bool-expr> ')'
	| '!' <value>
	| '-' <value>

<and-op> ::= '&' | 'and'
<xor-op> ::= '^' | 'xor'
<or-op> ::= '|' | 'or'
<and-expr> ::= <value> {<and-op> <value>}
<xor-expr> ::= <and-expr> {<xor-op> <and-expr>}
<or-expr> ::= <xor-expr> {<or-op> <xor-expr>}

<bool-expr> ::= <or-expr> | <rel-expr>

<lval> ::= <id> {'*' | '[' <factor> ']' | '.' <id> }

<lit> ::= <num> | <char> | <str>
<factor> ::= <lit> | <lval>

<arglist> ::= [<factor> {',' <factor>}]

<stmt> ::=
	'let' ['mut'] <id> [':' <type>] '=' <lit>
	| 'drop' <id> '=' <lit>
	
	| '!' <lval>
	| '-' <lval>
	
	| <lval> '<<=' <factor>
	| <lval> '>>=' <factor>
	
	| <lval> '^=' <factor> '&' <factor>
	| <lval> '^=' <factor> {'^' <factor>}
	
	| <lval> '+=' <factor> {'+' <factor> | '-' <factor>}
	| <lval> '-=' <factor> {'+' <factor> | '-' <factor>}
	
	| <lval> '<>' <lval>
	| <factor> '?' <lval> '<>' <lval>
	
	| 'if' <bool-expr> <block>
	  ['else' <block>]
	  'fi' <bool-expr>
	
	| 'from'  <bool-expr> [<block>]
	  'until' <bool-expr> [<block>]
	
	| 'do' <lval> '(' <arglist> ')'
	| 'undo' <lval> '(' <arglist> ')'

<block> ::= '{' { <stmt> ';' } '}'

<param> ::= ['mut'] <id> ':' <type>
<params> ::= [<param> {',' <param>}]

<fn> ::= 'fn' <id> '(' <params> ')' <block>

<attr> ::= '#![' <id> '=' <lit> ']'
