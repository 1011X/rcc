<id> ::= /[A-Za-z_][A-Za-z0-9_]*/

<str> ::= /"[^\"]"/
<char> ::= /'([^\\]|\\\\|\\n|\\t|\\')'/
<num> ::=
	/[-+]?[0-9_]+/         base   10
	| /0x[A-Fa-f0-9_]+/    base 0x10
	| /0b[01_]+/           base 0b10

<typelist> ::= <type> {',' <type>}
<type> ::=
	<id>
	| '()' | 'unit'
	| 'bool'
	| 'u16' | 'i16' | 'usize' | 'isize'        numeric types
	| '[' <type> ';' <num> ']'                 array
	| '^' <type>                               pointer
	| '?' <type>                               option
	| '(' <typelist> ')'                       tuple
	| 'fn' '(' [<typelist>] ')' ['->' <type>]  function types
	| 'type' <id> ['(' <typelist> ')']         user-built types

<type-decl> ::=
	'type' <id> [
		';'
		| '=' <type> ';'
		| '(' <id> {',' <id>} ')' '{'            type params
			<type> {',' <type>}                      tuple struct
			| <id> '=' <num> {'|' <id> ['=' <num>]}  enum
			| <type> {'|' <type>}                    untagged union
			| <id> <type> {'|' <id> <type>}          tagged union
			| <id> ':' <type> {',' <id> ':' <type>}  field struct
		'}'
	]

<rel-op> ::= '<' | '>' | '<=' | '>=' | '=' | '!='
<rel-expr> ::= <factor> {<rel-op> <factor>}

<value> ::=
	<factor>
	| '(' <bool-expr> ')'
	| '!' <value>
	| '-' <value>

<and-op> ::= '&' | 'and'
<xor-op> ::= '^' | 'xor'
<or-op> ::= '|' | 'or'
<and-expr> ::= <value> {<and-op> <value>}
<xor-expr> ::= <and-expr> {<xor-op> <and-expr>}
<or-expr> ::= <xor-expr> {<or-op> <xor-expr>}

<bool-expr> ::= <or-expr> | <rel-expr>

<lval> ::= <id> {'*' | '[' <factor> ']' | '.' <id> }

<lit> ::= <num> | <char> | <str>
<factor> ::= <lit> | <lval>

<arglist> ::= [<factor> {',' <factor>}]

<stmt> ::=
	'let' ['mut'] <id> [':' <type>] '=' <lit>
	| 'drop' <id> '=' <lit>
	
	| '!' <lval>
	| '-' <lval>
	
	| <lval> '<<=' <factor>
	| <lval> '>>=' <factor>
	
	| <lval> '^=' <factor> '&' <factor>
	| <lval> '^=' <factor> {'^' <factor>}
	
	| <lval> '+=' <factor> {'+' <factor> | '-' <factor>}
	| <lval> '-=' <factor> {'+' <factor> | '-' <factor>}
	
	| <lval> '<>' <lval>
	| <factor> '?' <lval> '<>' <lval>
	
	| 'if' <bool-expr> <block>
	  ['else' <block>]
	  ['fi' <bool-expr>]
	
	| 'from'  <bool-expr> [<block>]
	  'until' <bool-expr> [<block>]
	
	| 'do' <lval> '(' <arglist> ')' ['->' <factor>]
	| 'undo' <lval> '(' <arglist> ')' ['->' <factor>]

<block> ::= '{' {<stmt> ';' | <item>} '}'

<param> ::= ['mut'] <id> ':' <type>
<paramlist> ::= [<param> {',' <param>}]

<fn> ::=
	'fn' <id> '(' <paramlist> ')' ['->' <type>]
	['where' <id> ':' <id> ['(' <typelist> ')']]
	<block>

<macro-type> ::=
	'ident'
	| 'expr'
	| 'item'
	| 'stmt'
	| 'block'
	| 'tt'
	| 'meta'
	| 'path'
<macro-param> ::= '$' <id> ':' <macro-type>
<macro> ::= 'macro' <id> '(' <macro-param> {',' <macro-param>} ')'

<item> ::= <fn> | <macro> | <type-decl>

<attr-item> ::= '#' ['!'] '[' <attr> ']'
<attr> ::=
	<id>
	| <id> '=' <lit>
	| <id> '(' <attr> {',' <attr>} ')'
