proc rotate_left(x: int, r: int)
    var rm := r mod 32
    var bits_hi := 2 ^ rm - 1
    var bits_lo := 2 ^ (32 - rm) - 1
    var temp_hi := x & (bits_hi * 2 ^ (32 - rm))
    var temp_lo := x & bits_lo
    x := (temp_hi | temp_lo) xor ((temp_hi / 2 ^ (32 - rm)) | (temp_lo * 2 ^ rm))
    drop temp_lo := (x & (bits_lo * 2 ^ rm)) / 2 ^ rm
    drop temp_hi := (x & bits_hi) * 2 ^ (32 - rm)
    drop bits_lo := 2 ^ (32 - rm) - 1
    drop bits_hi := 2 ^ rm - 1
    drop rm := r % 32

proc Speck_key_secondary_sequence(key: int[], l: int[], rounds: int)
    var m := size(key)
    l[0] += key[1]
    if m > 2
        l[1] += key[2]
        if m > 3
            l[2] += key[3]
        fi
    fi
    from var i = 0 until rounds - 1
        //undo rotate_left(l[i], 8)
        l[i] :> 8
        l[i+m-1] += (k[i] + l[i]) xor i
        l[i] :< 8
        //do rotate_left(l[i], 8)
    end
    drop m := size(key)
end

proc Speck_key_expansion(key: int[], key_expanded: int[], rounds: int)
    var m := size(key)
    var i := 0
    var l[m+rounds]
    key_expanded[0] += key[0]
    do Speck_key_secondary_sequence(key, l, rounds)
    from var i = 0 until rounds - 1
        //todo: this with the secondary sequence generation can be replaced with a generic round function, the same as in encryption
        //do rotate_left(key_expanded[i], 3)
        key_expanded[i] :< 3
        key_expanded[i+1] += key_expanded[i] xor l[i+m-1]
        key_expanded[i] :> 3
        //undo rotate_left(key_expanded[i], 3)
        i += 1
    end
    undo Speck_key_secondary_sequence(key, l, rounds)
    drop l
    drop i := 0
    drop m := size(key)
end

// we don't want to employ Benett's trick, I think that's counterproductive in our case (for cryptoanalysis)
//procedure Simon_round(int S1, int S2, int S8, 

proc Speck_encipher(data: int[2], key: int[], rounds: int)
    var key_expanded[rounds]
    do Speck_key_expansion(key, key_expanded)
    from var i = 0 until rounds
        //todo: this can be replaced with a generic round function, the same as in key expansion
        // (S^-8 x, y)
        //undo rotate_left(data[0], 8)
        data[0] :> 8
        // (S^-8 x + y, y)
        data[0] += data[1]
        // ((S^-8 x + y) ^ k, y)
        data[0] := key_expanded[i]
        // ((S^-8 x + y) ^ k, S^3 y)
        //do rotate_left(data[1], 3)
        data[1] :< 3
        // ((S^-8 x + y) ^ k, S^3 y ^ (S^-8 x + y) ^ k)
        data[1] := data[0]
        i += 1
    end
    undo Speck_key_expansion(key, key_expanded)
    drop key_expanded[rounds]
end

proc main
    var key := [0, 1, 2, 3]
    var data := [42, 27]
    var more_data := [42, 27, 42, 27]
    var num_rounds := 32

    show(data)
    do Speck_encipher(data, key, num_rounds)
    show(data)
    undo Speck_encipher(data, key, num_rounds)
    show(data)
end
