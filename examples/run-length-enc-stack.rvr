// Run-length encoding using stacks

proc encode(text: stack, arc: stack)
    from !empty(text) and empty(arc)
        var val := 0
        var n := 0
        val += top(text)
        from n = 0
            var tmp := 0
            do pop: tmp, text
            drop tmp := val
            n += 1
        until empty(text) or top(text) != val end
        do push: val, arc
        do push: n, arc
        drop n := 0
        drop val := 0
    until empty(text) end
end

proc main
    var text: stack  // uncompressed text
    var arc: stack   // compressed text as (n, char) pairs in reverse order

    var x := 0
    x += 12
    do push(x, text)
    x += 53
    do push(x, text)
    x += 53
    do push(x, text)
    x += 53
    do push(x, text)
    x += 32
    do push(x, text)
    x += 32
    do push(x, text)
    drop x := 0

    do show: text
    do encode: text, arc
end
