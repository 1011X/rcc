proc div_mod(var mod: U8, var quot: U8, divisor: U8)
	from quot = 0
	until mod < divisor
		mod -= divisor
		quot += 1
	loop
return
		

~ proc uint_to_str_bin(var int: Uint u, var str: Str)
proc u8_to_str_bin(var int: U8, var str: Str)
	var i := 0
	from i = 0
		int :< 1
		if int % 2 = 0
			str += "0"
		else
			str += "1"
		fi
		i += 1
	until i = 8
	loop
	drop i := 8
return

proc u8_to_str_dec(var int: U8, var str: Str)
	var ones := 0
	var tens := 0
	var hundreds := 0
	
	int <> ones
	do div_mod(ones, int, 10)
	
	int <> tens
	do div_mod(tens, int, 10)
	
	int <> hundreds
	do div_mod(hundreds, int, 10)
	
	str += hundreds as Char as Str
	str += tens as Char as Str
	str += ones as Char as Str
	
	drop hundreds := str.(0) - '0'
	drop tens := str.(1) - '0'
	drop ones := str.(2) - '0'
return

proc u8_to_str_hex(var int: U8, var str: Str)
	var i := 0
	from i = 0
		int :< 4
		if int % 16 >= 0 and int % 16 < 10
			str += ('0' as Uint + int % 16) as Char as Str
		if int % 16 = 0
			str += "0"
		else if int % 16 = 1
			str += "1"
		else if int % 16 = 2
			str += "2"
		else if int % 16 = 3
			str += "3"
		else if int % 16 = 4
			str += "4"
		else if int % 16 = 5
			str += "5"
		else if int % 16 = 6
			str += "6"
		else if int % 16 = 7
			str += "7"
		else if int % 16 = 8
			str += "8"
		else if int % 16 = 9
			str += "9"
		else if int % 16 = 10
			str += "A"
		else if int % 16 = 11
			str += "B"
		else if int % 16 = 12
			str += "C"
		else if int % 16 = 13
			str += "D"
		else if int % 16 = 14
			str += "E"
		else
			str += "F"
		fi
		fi
		fi
		fi
		fi
		fi
		fi
		fi
		fi
		fi
		fi
		fi
		fi
		fi
		fi
		i += 4
	until i = 8
	loop
	drop i := 8
return
