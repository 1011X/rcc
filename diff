/*
Rever:
* slices
* automatic dealloc of immutable local variables

RIR:
* minimalistic
* automatically checks that local variables are 0
*/

// Rever:

use std::io;

proc main(ret: i32, args: ^[^[u8]]) {
	let s = args
		.get(1)
		.unwrap_or(b"y");
	
	let stdout = io::stdout();
	
	for _ in 0..usize::MAX {
		stdout.print(s);
	}
}

// RIR

use "stdio.rir";

proc main(ret: i32, argc: usize, argv: ^^u8) {
	static DEFAULT: ^u8 = b"y";
	
	let stdout: io::Stdout;
	let mut s: ^u8 = DEFAULT;
	
	call io::stdout(stdout);
	
	if argc >= 2 then
		s <> argv[1];
	assert argc >= 2;
	
	
	let mut i: usize = usize::MAX;
	
	from i = usize::MAX do
		io::print(stdout, s);
		i -= 1;
	until i = 0;
	
	// there's no clean-up for i because it's already 0 
	
	if argc >= 2 then
		s <> argv[1];
	assert argc >= 2;
	
	// clean up
	uncall io::stdout(stdout);
	
	s ^= DEFAULT;
}
